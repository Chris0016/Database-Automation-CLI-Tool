TODO:
    
Changes made:


    Interface enforcement.
     
    Design analysis:
        Keeping the defaults in the model classes feels like it makes sense. Afterall this data is
        related and feels like it belongs together. 

        Pros:
        
    Cons:
            Pass in null values for class constructor. 
            *Since you can't create  custom constructors for every option. For example number model. Can't have constructor for only min or max since both will have the same method signature. 
            Therefore, this means that model constructors need to implement logic to determine if values are null. 
            -> Having constructors perform this null interpretation is not ideal.


            -> Potentially more memory. Although by not much. 
                A new object can be created multiple times with repeated default values. 
                *Not a concern but something to mention.

        
        Central:
        Logic of dealing interpreting user input is given to the client class(MainCommand.java)
        Server has no knowledge of defaults or interpretation and as a result is very basic. 

        Cons:
            Verbose.

        The question becomes who do I want to give the complexity to? MainCommand(Central) or Models(Distributed)?

        No matter what I believe interpreting user input should not be the responsibility of the Models. Therefore the defaults should be set on the ModelConfigs.java file. 
        Even if that means the code may be verbose. 
            
------------
* : Indicates current column working on.

Colums: 
    Name 
    Text: Non-numeric random string of characters is generated. Users can specify max or minimum length.  Default min is 4 and Default max is 200. 
        -mnLen: minimum length (optional)
        -mxLen: max length (optional)

    Custom Col: Col values are selected(can be random with option) from user directed file. If file is not found then the program quits. 
        -o : Select values in order. Not that number of items must match number of rows. 
        Default behavior: Values are selected randomly. 
        
    Number: Using options users can specify whether they want an int or decimal. 
        -dec  
        -currency -> default of false
        -max -> default 100
        -min -> default 0

        default behavior: an integer > 0 is provided

    email:
        -domains [ comma separated list of acceptable domains ]  *Note perform error checking for valid user input domains
        -maxLength
        -minLength

        default behavior: outputs emails containing letters, numbers, underscores, and dots. At least one letter. From domains: gmail.com, outlook.com and yahoo.com
        
    Date:
        -from Start date 
        -to End date
        -format < dd/MM/yyyy, MM/dd/yyyy, ..., MM-dd-yyyy> choose one. 

        default behavior: Gives a random date from 1/1/1990 to current date.
    
    Timestap
        -from
        -to
    Hash:
        -Base64
        -algo1
        -algo2
        ....
        


    
Notes:
     

    Account for primary key -> Make requirement that database must be set to autofill keys
    sql statement might look like -. INsert (?,?,?,?) values (*nokey,* value1, value2,... )


    User input files must follow format. 
    comma separated values with the first value being the number of items in the file.

    Give examples of usage in documentation: 
    Single Day -> Just use the custom col like -> custom -src dateFile. 
